//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XLuaGenerate.Src {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class XLuaTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal XLuaTemplates() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    //global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XLuaGenerate.Src.XLuaTemplates", typeof(XLuaTemplates).Assembly);
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MyXluaGenerate.Src.XLuaTemplates", typeof(XLuaTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%ForEachCsList(namespaces, function(namespace)%&gt;using &lt;%=namespace%&gt;;&lt;%end)%&gt;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///local OpNameMap = {
        ///    op_Addition = &quot;__AddMeta&quot;,
        ///	op_Subtraction = &quot;__S [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaClassWrap_tpl {
            get {
                return ResourceManager.GetString("LuaClassWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public partial class DelegateBridge : DelegateBridgeBase
        ///    {
        ///		&lt;%
        ///		ForEachCsList(delegates_groups, function(delegates_group, group_idx)
        ///		local delegate = [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaDelegateBridge_tpl {
            get {
                return ResourceManager.GetString("LuaDelegateBridge_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///local parameters = delegate:GetParameters()
        ///local in_num = CalcCsList(parameters, function(p) return not (p.IsOut and p.ParameterType.IsByRef) end)
        ///local [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaDelegateWrap_tpl {
            get {
                return ResourceManager.GetString("LuaDelegateWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///local enum_or_op = debug.getmetatable(CS.System.Reflection.BindingFlags.Public).__bor
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    using Utils = XLua.Utils;
        ///  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaEnumWrap_tpl {
            get {
                return ResourceManager.GetString("LuaEnumWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    public class &lt;%=CSVariableName(type)%&gt;Bridge : LuaBase, &lt;%=CsFullTypeName(type)%&gt;
        ///    {
        ///	    public static LuaBase __Create(int ref [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaInterfaceBridge_tpl {
            get {
                return ResourceManager.GetString("LuaInterfaceBridge_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Reflection;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    public class XLua_Gen_Initer_Register__
        ///	{
        ///        &lt;%
        ///        local split_method_per [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaRegister_tpl {
            get {
                return ResourceManager.GetString("LuaRegister_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public partial class ObjectTranslator
        ///    {
        ///        &lt;%if purevaluetypes.Count &gt; 0 then
        ///        local init_class_name = &quot;IniterAdder&quot; .. CSVariableName(pureval [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string LuaWrapPusher_tpl {
            get {
                return ResourceManager.GetString("LuaWrapPusher_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public static partial class CopyByValue
        ///    {
        ///        &lt;%ForEachCsList(type_infos, function(type_info)
        ///        local full_type_name = CsFullTypeName(type_info. [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string PackUnpack_tpl {
            get {
                return ResourceManager.GetString("PackUnpack_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 -- Tencent is pleased to support the open source community by making xLua available.
        ///-- Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
        ///-- Licensed under the MIT License (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at
        ///-- http://opensource.org/licenses/MIT
        ///-- Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRA [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string TemplateCommon_lua {
            get {
                return ResourceManager.GetString("TemplateCommon_lua", resourceCulture);
            }
        }
    }
}
